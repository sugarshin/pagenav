// Generated by CoffeeScript 1.9.0

/*!
 * @license pagenav
 * (c) sugarshin
 * License: MIT
 */
"use strict";
(function(root, factory) {
  if (typeof module === 'object' && typeof module.exports === 'object') {
    module.exports = factory(require('jquery'), require('throttle-debounce'));
  } else {
    root.Pagenav || (root.Pagenav = factory(root.jQuery));
  }
})(this, function($, td) {
  var Pagenav;
  if (td === void 0) {
    td = $;
  }
  return Pagenav = (function() {
    var _$window;

    _$window = $(window);

    Pagenav.prototype._getRandomString = (function() {
      var chars;
      chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghiklmnopqrstuvwxyz';
      return function(length) {
        var i, randomNumber, string, _i;
        if (length == null) {
          length = 32;
        }
        string = '';
        for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
          randomNumber = Math.floor(Math.random() * chars.length);
          string += chars.substring(randomNumber, randomNumber + 1);
        }
        return string;
      };
    })();

    Pagenav.prototype._defaults = {
      delayType: 'throttle',
      delay: 400,
      offset: 0,
      range: 0,
      onActivate: function(el) {},
      onDeactivate: function(el) {}
    };

    Pagenav.prototype._configure = function(el, opts) {
      this.$el = $(el);
      this.$target = $(this.$el.attr('href'));
      this.opts = $.extend({}, this._defaults, opts);
      return this._namespace = this._getRandomString(16);
    };

    function Pagenav(_at_el, opts) {
      this.el = _at_el;
      this._configure(this.el, opts);
      this.activate(_$window.scrollTop());
      this.events();
    }

    Pagenav.prototype.activate = function(scrollTop) {
      var offset, range;
      offset = this.$target.offset().top - this.opts.offset;
      range = this.$target.outerHeight() + this.opts.range + offset;
      if ((offset <= scrollTop && scrollTop < range)) {
        return this.opts.onActivate(this.$el[0]);
      } else {
        return this.opts.onDeactivate(this.$el[0]);
      }
    };

    Pagenav.prototype.events = function() {
      _$window.on("scroll.pagenav" + this._namespace, td[this.opts.delayType](this.opts.delay, (function(_this) {
        return function() {
          return _this.activate(_$window.scrollTop());
        };
      })(this)));
      return this;
    };

    Pagenav.prototype.unbind = function() {
      _$window.off("scroll.pagenav" + this._namespace);
      return this;
    };

    return Pagenav;

  })();
});
